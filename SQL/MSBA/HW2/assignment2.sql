/*Part A*/
/*A*/
CREATE VIEW TEMP1 AS (
  SELECT STATE, AREA_CODE, SUM(ACTSALES) AS SALES
  FROM STATECOFFEE, AREACOFFEE, FACTCOFFEE
  WHERE STATECOFFEE.STATEID=AREACOFFEE.STATEID AND
        AREACOFFEE.AREA_CODE=FACTCOFFEE.AREAID AND
        EXTRACT(YEAR FROM FACTDATE) = 2013
  GROUP BY STATE, AREA_CODE
);

CREATE VIEW TEMP2 AS (
  SELECT STATE, AVG(SALES) AS AVGSALES
  FROM TEMP1
  GROUP BY STATE
);

SELECT TEMP1.STATE, AREA_CODE, SALES
FROM TEMP1, TEMP2
WHERE TEMP1.STATE = TEMP2.STATE AND
      TEMP1.SALES > 0.1*TEMP2.AVGSALES
ORDER BY SALES DESC;

SELECT PRODNAME, TOTALSALES, ROUND(TOTALPROFIT/TOTALSALES,2) AS GROSSMARGIN
FROM (
SELECT PRODNAME, SUM(ACTSALES) AS TOTALSALES, SUM(ACTPROFIT) TOTALPROFIT
FROM PRODCOFFEE, FACTCOFFEE
WHERE PRODCOFFEE.PRODUCTID=FACTCOFFEE.PRODUCTID
GROUP BY PRODNAME
)
ORDER BY TOTALSALES DESC;

SELECT *
FROM (
SELECT AREAID, PRODLINE, SUM(ACTPROFIT) AS TOTALPROFIT
FROM FACTCOFFEE, PRODCOFFEE
WHERE FACTCOFFEE.PRODUCTID=PRODCOFFEE.PRODUCTID AND
      EXTRACT(YEAR FROM FACTDATE) = 2012
GROUP BY AREAID, PRODLINE
)
PIVOT (
  COUNT(PRODLINE)
  FOR PRODLINE IN ('Beans', 'Leaves')
)
ORDER BY AREAID;

CREATE VIEW TEMP_LEAVES AS
SELECT AREAID, SUM(ACTPROFIT) AS SUBTOTAL
FROM FACTCOFFEE, PRODCOFFEE
WHERE FACTCOFFEE.PRODUCTID=PRODCOFFEE.PRODUCTID AND
      PRODCOFFEE.PRODLINE='Leaves'
GROUP BY AREAID;

CREATE VIEW TEMP_BEANS AS
SELECT AREAID, SUM(ACTPROFIT) AS SUBTOTAL
FROM FACTCOFFEE, PRODCOFFEE
WHERE FACTCOFFEE.PRODUCTID=PRODCOFFEE.PRODUCTID AND
      PRODCOFFEE.PRODLINE='Beans'
GROUP BY AREAID;

SELECT TEMP_LEAVES.AREAID AS AREAID,
        TEMP_LEAVES.SUBTOTAL AS LEAVESPROFIT,
        TEMP_BEANS.SUBTOTAL AS BEANSPROFIT
FROM TEMP_LEAVES, TEMP_BEANS
WHERE TEMP_LEAVES.AREAID=TEMP_BEANS.AREAID AND
      TEMP_LEAVES.SUBTOTAL > 2*TEMP_BEANS.SUBTOTAL AND
      TEMP_BEANS.SUBTOTAL > 0
ORDER BY LEAVESPROFIT;

SELECT AREAID, SUM(ACTPROFIT)
FROM FACTCOFFEE, PRODCOFFEE
WHERE FACTCOFFEE.PRODUCTID=PRODCOFFEE.PRODUCTID AND
      PRODLINE='Beans'
GROUP BY AREAID;

/*B*/
CREATE VIEW TEMP_3 AS
SELECT * FROM (
SELECT AREAID, FY2012, FY2013, FY2012-FY2013 AS DECLINE FROM (
SELECT AREAID, EXTRACT(YEAR FROM FACTDATE) AS YEAR, SUM(ACTPROFIT) AS TOTALPROFIT
FROM FACTCOFFEE
GROUP BY AREAID, EXTRACT(YEAR FROM FACTDATE)
)
PIVOT (
SUM(TOTALPROFIT) FOR (YEAR) IN ('2012' AS FY2012, '2013' AS FY2013)
)
WHERE FY2012 IS NOT NULL AND FY2013 IS NOT NULL
ORDER BY DECLINE DESC
)
WHERE ROWNUM<6;

SELECT * FROM TEMP_3;

SELECT AREAID, PRODNAME, FY2012, FY2013, FY2012-FY2013 AS DECLINE FROM (
SELECT * FROM (
SELECT TEMP_3.AREAID AS AREAID, PRODNAME, EXTRACT(YEAR FROM FACTDATE) AS YEAR, 
        SUM(ACTPROFIT) AS TOTALPROFIT
FROM FACTCOFFEE, PRODCOFFEE, TEMP_3
WHERE TEMP_3.AREAID=FACTCOFFEE.AREAID AND
      FACTCOFFEE.PRODUCTID=PRODCOFFEE.PRODUCTID
GROUP BY TEMP_3.AREAID, FACTCOFFEE.PRODUCTID, PRODNAME, EXTRACT(YEAR FROM FACTDATE)
)
PIVOT (
SUM(TOTALPROFIT)
FOR YEAR IN (2012 AS FY2012, 2013 AS FY2013)
)
)
WHERE FY2012 IS NOT NULL AND FY2013 IS NOT NULL
ORDER BY AREAID, DECLINE DESC;

/*C*/
SELECT STATE,
        SUM(ACTSALES)-SUM(BUDSALES) AS SALESSURPLUS,
        SUM(ACTPROFIT)-SUM(BUDPROFIT) AS PROFITSURPLUS
FROM FACTCOFFEE, AREACOFFEE, STATECOFFEE
WHERE FACTCOFFEE.AREAID=AREACOFFEE.AREA_CODE AND
      AREACOFFEE.STATEID=STATECOFFEE.STATEID AND
      EXTRACT(YEAR FROM FACTDATE)=2012 AND
      ACTSALES IS NOT NULL AND
      BUDSALES IS NOT NULL AND
      ACTPROFIT IS NOT NULL AND
      BUDSALES IS NOT NULL
GROUP BY STATE
ORDER BY PROFITSURPLUS DESC;

SELECT AREAID AS AREA_CODE,
        SUM(ACTSALES)-SUM(BUDSALES) AS SALESSURPLUS,
        SUM(ACTPROFIT)-SUM(BUDPROFIT) AS PROFITSURPLUS
FROM FACTCOFFEE
WHERE EXTRACT(YEAR FROM FACTDATE)=2012 AND
      ACTSALES IS NOT NULL AND
      BUDSALES IS NOT NULL AND
      ACTPROFIT IS NOT NULL AND
      BUDSALES IS NOT NULL
GROUP BY AREAID
ORDER BY PROFITSURPLUS DESC;

/*D*/
CREATE VIEW TEMP_4 AS
SELECT MARKET, PRODNAME, FY2013-FY2012 AS GROWTH FROM (
  SELECT * FROM (
    SELECT MARKET, PRODNAME, EXTRACT(YEAR FROM FACTDATE) AS YEAR, 
            SUM(ACTPROFIT) AS TOTALPROFIT
    FROM STATECOFFEE, FACTCOFFEE, PRODCOFFEE, AREACOFFEE
    WHERE STATECOFFEE.STATEID=AREACOFFEE.STATEID AND
          FACTCOFFEE.PRODUCTID=PRODCOFFEE.PRODUCTID AND
          FACTCOFFEE.AREAID=AREACOFFEE.AREA_CODE AND
          ACTPROFIT IS NOT NULL
    GROUP BY MARKET, PRODNAME, EXTRACT(YEAR FROM FACTDATE)
  )
  PIVOT (
    SUM(TOTALPROFIT) FOR YEAR IN (2012 AS FY2012, 2013 AS FY2013)
  )
)
ORDER BY GROWTH DESC;

SELECT MARKET, PRODNAME, GROWTH FROM(
  SELECT TEMP_4.*, ROW_NUMBER() OVER (PARTITION BY MARKET ORDER BY GROWTH DESC) AS RN
  FROM TEMP_4
)
WHERE RN=1
ORDER BY MARKET;

SELECT PRODTYPE, PRODNAME, FY2013-FY2012 AS GROWTH FROM (
  SELECT * FROM (
    SELECT PRODTYPE, PRODNAME, EXTRACT(YEAR FROM FACTDATE) AS YEAR, SUM(ACTSALES) AS TOTALSALES
    FROM PRODCOFFEE, FACTCOFFEE
    WHERE PRODCOFFEE.PRODUCTID=FACTCOFFEE.PRODUCTID
    GROUP BY PRODTYPE, PRODNAME, EXTRACT(YEAR FROM FACTDATE)
  )
  PIVOT (
    SUM(TOTALSALES) FOR YEAR IN (2012 AS FY2012, 2013 AS FY2013)
  )
)
ORDER BY PRODTYPE, GROWTH DESC;

/*E*/
CREATE VIEW TEMP_5 AS
SELECT STATE, ROUND(MKTEXPENSE/TOTALSALES, 2) AS EXPENSE,
        ROUND(TOTALPROFIT/TOTALSALES, 2) AS PROFIT
FROM (
  SELECT STATE, SUM(ACTMARKCOST) AS MKTEXPENSE, SUM(ACTSALES) AS TOTALSALES,
          SUM(ACTPROFIT) AS TOTALPROFIT
  FROM STATECOFFEE, FACTCOFFEE, AREACOFFEE
  WHERE STATECOFFEE.STATEID=AREACOFFEE.STATEID AND
        FACTCOFFEE.AREAID=AREACOFFEE.AREA_CODE
  GROUP BY STATE
);

SELECT * FROM (
  SELECT * FROM TEMP_5
  ORDER BY EXPENSE ASC
)
WHERE ROWNUM<6;

SELECT * FROM (
  SELECT * FROM TEMP_5
  ORDER BY PROFIT DESC
)
WHERE ROWNUM<6;

SELECT PRODNAME, ROUND(MKTEXPENSE/TOTALSALES, 2) AS EXPENSE FROM (
  SELECT PRODNAME, SUM(ACTMARKCOST) AS MKTEXPENSE, SUM(ACTSALES) AS TOTALSALES
  FROM PRODCOFFEE, FACTCOFFEE
  WHERE PRODCOFFEE.PRODUCTID=FACTCOFFEE.PRODUCTID
  GROUP BY PRODNAME
)
ORDER BY EXPENSE ASC;

/*F*/
SELECT * FROM (
  SELECT * FROM TEMP_5
  ORDER BY EXPENSE DESC
)
WHERE ROWNUM<6;

CREATE VIEW TEMP_EXP AS
SELECT * FROM (
  SELECT * FROM TEMP_5
  ORDER BY EXPENSE DESC
)
WHERE ROWNUM<6;

SELECT TEMP_EXP.STATE AS STATE, AREA_CODE,
        SUM(ACTMARKCOST) AS MKTEXPENSE,
        SUM(ACTPROFIT) AS TOTALPROFIT,
        ROUND(SUM(ACTMARKCOST)/SUM(ACTPROFIT), 2) AS EXPENSERATIO
FROM TEMP_EXP, STATECOFFEE, AREACOFFEE, FACTCOFFEE
WHERE TEMP_EXP.STATE=STATECOFFEE.STATE AND
      STATECOFFEE.STATEID=AREACOFFEE.STATEID AND
      AREACOFFEE.AREA_CODE=FACTCOFFEE.AREAID
GROUP BY TEMP_EXP.STATE, AREA_CODE
ORDER BY STATE, MKTEXPENSE DESC;

/*G*/
CREATE VIEW TEMP_6 AS
SELECT STATE, AREAID, EXTRACT(YEAR FROM FACTDATE) AS YEAR,
        SUM(ACTSALES) AS TOTALSALES,
        SUM(ACTEXPENSES) AS TOTALEXPENSE,
        SUM(ACTPROFIT) AS TOTALPROFIT
FROM STATECOFFEE, AREACOFFEE, FACTCOFFEE
WHERE STATECOFFEE.STATEID=AREACOFFEE.STATEID AND
      AREACOFFEE.AREA_CODE=FACTCOFFEE.AREAID
GROUP BY STATE, AREAID, EXTRACT(YEAR FROM FACTDATE)
ORDER BY STATE, TOTALPROFIT DESC;

CREATE VIEW TEMP_SALES AS
SELECT STATE, AREAID, FY2012SALES, FY2013SALES,
        FY2013SALES-FY2012SALES AS GROWTH
FROM (
  SELECT *
  FROM (
    SELECT STATE, AREAID, YEAR, TOTALSALES
    FROM TEMP_6
  )
  PIVOT (
    SUM(TOTALSALES) FOR YEAR IN (2012 AS FY2012SALES, 2013 AS FY2013SALES)
  )
)
ORDER BY STATE, GROWTH DESC;

CREATE VIEW TEMP_EXPENSE AS
SELECT STATE, AREAID, FY2012EXPENSE, FY2013EXPENSE,
        FY2013EXPENSE-FY2012EXPENSE AS GROWTH
FROM (
  SELECT *
  FROM (
    SELECT STATE, AREAID, YEAR, TOTALEXPENSE
    FROM TEMP_6
  )
  PIVOT (
    SUM(TOTALEXPENSE) FOR YEAR IN (2012 AS FY2012EXPENSE, 2013 AS FY2013EXPENSE)
  )
)
ORDER BY STATE, GROWTH DESC;

CREATE VIEW TEMP_PROFIT AS
SELECT STATE, AREAID, FY2012PROFIT, FY2013PROFIT,
        FY2013PROFIT-FY2012PROFIT AS GROWTH
FROM (
  SELECT *
  FROM (
    SELECT STATE, AREAID, YEAR, TOTALPROFIT
    FROM TEMP_6
  )
  PIVOT (
    SUM(TOTALPROFIT) FOR YEAR IN (2012 AS FY2012PROFIT, 2013 AS FY2013PROFIT)
  )
)
ORDER BY STATE, GROWTH DESC;

CREATE VIEW TEMP_7 AS
SELECT TEMP_SALES.STATE, TEMP_SALES.AREAID,
        FY2012SALES, FY2013SALES, TEMP_SALES.GROWTH AS SALESGROWTH,
        FY2012EXPENSE, FY2013EXPENSE, TEMP_EXPENSE.GROWTH AS EXPENSEGROWTH,
        FY2012PROFIT, FY2013PROFIT, TEMP_PROFIT.GROWTH AS PROFITGROWTH
FROM TEMP_SALES, TEMP_EXPENSE, TEMP_PROFIT
WHERE TEMP_SALES.AREAID=TEMP_EXPENSE.AREAID AND
      TEMP_SALES.AREAID=TEMP_PROFIT.AREAID AND
      TEMP_SALES.GROWTH IS NOT NULL AND
      TEMP_EXPENSE.GROWTH IS NOT NULL AND
      TEMP_PROFIT.GROWTH IS NOT NULL;
      
SELECT * FROM TEMP_7
ORDER BY FY2013PROFIT ASC, SALESGROWTH ASC;

CREATE VIEW TEMP_8 AS
SELECT PRODNAME, EXTRACT(YEAR FROM FACTDATE) AS YEAR,
        SUM(ACTSALES) AS TOTALSALES,
        SUM(ACTPROFIT) AS TOTALPROFIT
FROM PRODCOFFEE, FACTCOFFEE
WHERE PRODCOFFEE.PRODUCTID=FACTCOFFEE.PRODUCTID
GROUP BY PRODNAME, EXTRACT(YEAR FROM FACTDATE);

DROP VIEW TEMP_SALES;
CREATE VIEW TEMP_SALES AS
SELECT * FROM (
  SELECT PRODNAME, YEAR, TOTALSALES
  FROM TEMP_8
)
PIVOT (
  SUM(TOTALSALES) FOR YEAR IN (2012 AS FY2012SALES, 2013 AS FY2013SALES)
);

DROP VIEW TEMP_PROFIT;
CREATE VIEW TEMP_PROFIT AS
SELECT * FROM (
  SELECT PRODNAME, YEAR, TOTALPROFIT
  FROM TEMP_8
)
PIVOT (
  SUM(TOTALPROFIT) FOR YEAR IN (2012 AS FY2012PROFIT, 2013 AS FY2013PROFIT)
);

SELECT TEMP_SALES.PRODNAME,
        FY2013SALES-FY2012SALES AS SALESGROWTH,
        FY2013PROFIT-FY2012PROFIT AS PROFITGROWTH,
        ROUND((FY2013PROFIT-FY2012PROFIT)/(FY2013SALES-FY2012SALES), 2) AS RATIO
FROM TEMP_SALES, TEMP_PROFIT
WHERE TEMP_SALES.PRODNAME=TEMP_PROFIT.PRODNAME AND
      FY2012SALES IS NOT NULL AND
      FY2013SALES IS NOT NULL AND
      FY2012PROFIT IS NOT NULL AND
      FY2013PROFIT IS NOT NULL
ORDER BY PROFITGROWTH DESC, SALESGROWTH ASC;

/*Part B*/
/*Q1*/
CREATE TABLE MANAGERS
(
  REGID NUMBER NOT NULL,
  REGION VARCHAR2(10),
  MANAGER VARCHAR2(10),
  CONSTRAINT MANAGERS_PK PRIMARY KEY (REGID),
  CONSTRAINT REGION CHECK (REGION IN ('South', 'East', 'Central', 'West'))
);

CREATE TABLE PRODUCTS
(
  PRODID NUMBER,
  PRODNAME VARCHAR2(100),
  PRODCAT VARCHAR2(30),
  PRODSUBCAT VARCHAR2(30),
  PRODCONT VARCHAR2(20),
  PRODUNITPRICE NUMBER(7, 2),
  PRODMARGIN NUMBER(5, 3),
  CONSTRAINT PRODUCTS_PK PRIMARY KEY (PRODID),
  CONSTRAINT PRODCAT CHECK (PRODCAT IN ('Technology', 'Furniture', 'Office Supplies')),
  CONSTRAINT PRODCONT CHECK (PRODCONT IN ('Jumbo Drum', 'Medium Box', 'Jumbo Box', 'Wrap Bag', 'Large Box', 'Small Box', 'Small Pack'))
);

CREATE TABLE ORDERS
(
  ORDERID NUMBER,
  STATUS VARCHAR2(10),
  CONSTRAINT ORDERS_PK PRIMARY KEY (ORDERID)
);

CREATE TABLE CUSTOMERS
(
  CUSTID NUMBER,
  CUSTNAME VARCHAR2(35),
  CUSTREG NUMBER(1, 0),
  CUSTSTATE VARCHAR2(20),
  CUSTCITY VARCHAR2(20),
  CUSTZIP NUMBER(5, 0),
  CUSTSEG VARCHAR2(15),
  CONSTRAINT CUSTOMERS_PK PRIMARY KEY (CUSTID),
  CONSTRAINT CUSTREG_FK FOREIGN KEY (CUSTREG)
    REFERENCES MANAGERS (REGID) ON DELETE CASCADE,
  CONSTRAINT CUSTSEG_CHECK CHECK (CUSTSEG IN ('Home Office', 'Corporate', 'Small Business', 'Consumer'))
);

DROP TABLE ORDERDET;
CREATE TABLE ORDERDET
(
  ORDERID NUMBER,
  CUSTID NUMBER,
  PRODID NUMBER,
  ORDPRIORITY VARCHAR2(15),
  ORDDISCOUNT NUMBER(3, 2),
  ORDSHIPMODE VARCHAR2(15),
  ORDDATE DATE,
  ORDSHIPDATE DATE,
  ORDSHIPCOST NUMBER(5, 2),
  ORDQTY NUMBER,
  ORDSALES NUMBER(7, 2),
  CONSTRAINT ORDERDET_PK PRIMARY KEY (ORDERID, CUSTID, PRODID),
  CONSTRAINT ORDERID_FK FOREIGN KEY (ORDERID)
    REFERENCES ORDERS (ORDERID),
  CONSTRAINT CUSTID_FK FOREIGN KEY (CUSTID)
    REFERENCES CUSTOMERS (CUSTID),
  CONSTRAINT PRODID_FK FOREIGN KEY (PRODID)
    REFERENCES PRODUCTS (PRODID),
  CONSTRAINT ORDPRIORITY CHECK (ORDPRIORITY IN ('Low', 'Medium', 'High', 'Critical', 'Not Specified')),
  CONSTRAINT ORDSHIPMODE CHECK (ORDSHIPMODE IN ('Regular Air', 'Delivery Truck', 'Express Air'))
);

/*Q2*/
SELECT ROUND(SUM(CASE WHEN UPPER(STATUS) LIKE '%RETURNED%' THEN 1 ELSE 0 END)/COUNT(*)*100, 2) AS RETURNPERCENT
FROM ORDERS;

SELECT SUM(ORDSALES) AS SALESFROMRETURN
FROM ORDERS, ORDERDET
WHERE ORDERS.ORDERID=ORDERDET.ORDERID AND
      UPPER(STATUS) LIKE '%RETURNED%';
      
SELECT CUSTNAME, SUM(ORDSALES) AS TOTALRETURN
FROM CUSTOMERS, ORDERDET, ORDERS
WHERE CUSTOMERS.CUSTID=ORDERDET.CUSTID AND
      ORDERDET.ORDERID=ORDERS.ORDERID AND
      UPPER(STATUS) LIKE '%RETURNED%'
GROUP BY CUSTNAME
ORDER BY TOTALRETURN DESC;

/*Q3*/
SELECT CUSTNAME, SUM(ORDSALES) AS TOTALSALES
FROM CUSTOMERS, ORDERDET
WHERE CUSTOMERS.CUSTID=ORDERDET.CUSTID
GROUP BY CUSTNAME
ORDER BY TOTALSALES DESC;

CREATE VIEW PRODCAT AS
SELECT CUSTNAME, PRODCAT, SUM(ORDSALES) AS TOTALSALES
FROM CUSTOMERS, ORDERDET, PRODUCTS
WHERE CUSTOMERS.CUSTID=ORDERDET.CUSTID AND
      ORDERDET.PRODID=PRODUCTS.PRODID
GROUP BY CUSTNAME, PRODCAT;

CREATE VIEW PRODCAT2 AS
SELECT CUSTNAME, PRODCAT, SUM(ORDSALES) AS TOTALSALES
FROM CUSTOMERS, ORDERDET, PRODUCTS
WHERE CUSTOMERS.CUSTID=ORDERDET.CUSTID AND
      ORDERDET.PRODID=PRODUCTS.PRODID
GROUP BY CUSTNAME, PRODCAT;

SELECT PRODCAT.CUSTNAME, PRODCAT.PRODCAT AS CAT1, PRODCAT.TOTALSALES AS CAT1SALES,
        PRODCAT2.PRODCAT AS CAT2, PRODCAT2.TOTALSALES AS CAT2SALES, 
        ROUND(PRODCAT.TOTALSALES/PRODCAT2.TOTALSALES, 2) AS RATIO
FROM PRODCAT, PRODCAT2
WHERE PRODCAT.CUSTNAME=PRODCAT2.CUSTNAME AND
      PRODCAT.PRODCAT<>PRODCAT2.PRODCAT AND
      PRODCAT.TOTALSALES/PRODCAT2.TOTALSALES>10
ORDER BY CUSTNAME, RATIO DESC;

/*Q4*/
SELECT Q.*, ACTUALVALUE-THEORETICALVALUE AS SURPLUSVALUE FROM (
  SELECT SUM(ROUND(PRODUNITPRICE*ORDQTY*(1-ORDDISCOUNT)+ORDSHIPCOST, 2)) AS THEORETICALVALUE,
          SUM(ORDSALES) AS ACTUALVALUE
  FROM ORDERDET, PRODUCTS
  WHERE PRODUCTS.PRODID=ORDERDET.PRODID
) Q;

SELECT Q.*, ACTUALVALUE-THEORETICALVALUE AS SURPLUSVALUE FROM (
  SELECT MANAGER,
          SUM(ROUND(PRODUNITPRICE*ORDQTY*(1-ORDDISCOUNT)+ORDSHIPCOST, 2)) AS THEORETICALVALUE,
          SUM(ORDSALES) AS ACTUALVALUE
  FROM MANAGERS, ORDERDET, PRODUCTS, CUSTOMERS
  WHERE MANAGERS.REGID=CUSTOMERS.CUSTREG AND
        CUSTOMERS.CUSTID=ORDERDET.CUSTID AND
        ORDERDET.PRODID=PRODUCTS.PRODID
  GROUP BY MANAGER
) Q
ORDER BY SURPLUSVALUE DESC;

/*Q5*/
SELECT PRODNAME
FROM PRODUCTS
WHERE REGEXP_LIKE (PRODNAME, '[0-9]+');

SELECT PRODNAME, SUM(ORDSALES) AS TOTALSALES
FROM PRODUCTS, ORDERDET
WHERE PRODUCTS.PRODID=ORDERDET.PRODID AND
      EXTRACT(YEAR FROM ORDDATE)=2011
GROUP BY PRODNAME
ORDER BY TOTALSALES DESC;

SELECT PRODNAME, ROUND(SUM(ORDSALES*PRODMARGIN), 2) AS MARGIN
FROM PRODUCTS, ORDERDET
WHERE PRODUCTS.PRODID=ORDERDET.PRODID
GROUP BY PRODNAME
ORDER BY MARGIN DESC;

SELECT PRODNAME, SUM(ORDSALES) AS TOTALSALES
FROM PRODUCTS, ORDERDET
WHERE PRODUCTS.PRODID=ORDERDET.PRODID
GROUP BY PRODNAME
ORDER BY TOTALSALES ASC;
