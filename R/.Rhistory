sapply(co_move, function(x) (sum(x)/length(x))*100%)
sapply(co_move, function(x) sum(x)/length(x))
library(ISLR)
library(dplyr)
summary(Weekly)
co_move <- data.frame(lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0))
# direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
cat("The output below is the probability that the current weekly percentage return is positive given that of the previous X weeks is also positive.\n")
sapply(co_move, function(x) sum(x)/length(x))
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_points()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_point()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today))
p5 + geom_point()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today))
p5 + geom_point()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
multiplot(p1, p2, p3, p4, p5, cols=2)
library(ggplot2)
library(gridExtra)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
grid.arrange(p1, p2, p3, p4, p5, ncol=2)
library(ggplot2)
library(gridExtra)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
grid.arrange(p1, p2, p3, p4, p5, ncol=2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
?glm
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binary)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binominal)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
logistic_fit
coef(logistic_fit)
predict(logistic_fit, type="response")
predict(logistic_fit, type="response")[1:10]
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
coef(logistic_fit)
cat("Print out the first 10 predictions on dataset.")
predict(logistic_fit, type="response")[1:10]
contrasts(Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
coef(logistic_fit)
cat("Print out the first 10 predictions on dataset.")
predict(logistic_fit, type="response")[1:10]
contrasts(Weekly$Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
predict(logistic_fit, type="response")[1:10]
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
sapply(predict(logistic_fit, type="response")[1:10], function(x) "Up" if x>0.5 else "Down")
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
sapply(predict(logistic_fit, type="response")[1:10], function(x) ifelse(x>0.5, "Up", "Down"))
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, Weekly$Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("The summary of the fitted model is below.")
print(summary(logistic_fit))
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, Weekly$Direction)
?table
x <- 1:4
y <- 5:8
table(x, y)
The confusion matrix has four cells. Mistakes are in the cells where the row index and column index are different. So in this case, the most common mistake is when the regression model predicts _Up_ while the actual return went _Down_ (more than 400 occurrences). In fact, the prediction model is highly biased towards _Up_ vs _Down_ `r cat(sum(prediction_logistic=="Up"), ":", sum(prediction_logistic=="Down"))`, where in reality both sides are almost equally likely.
sum(prediction_logistic=="Up")
summary(Weekly$Year)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, Weekly$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
prediction_logistic
length(prediction_logistic)
length(test_set$Direction)
cat("The prediction vs actual Direction is tabulated below.")
table(prediction_logistic, Weekly$Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("The summary of the fitted model is below.")
print(summary(logistic_fit))
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
cat("The prediction vs actual Direction is tabulated below.")
table(prediction_logistic, Weekly$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.Lag2, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.Lag2, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, newdata=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
contrasts(training_set$Direction)
source('~/.active-rstudio-document', echo=TRUE)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~Lag2, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, newdata=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
source('~/.active-rstudio-document', echo=TRUE)
(34+56)/14
(56+9)/(56+9+5+34)
?knn
?knn
library(class)
?knn
knn(train=training_set[, "Lag2"], test=test_set[, "Lag2"], cl=training_set[, "Direction"], k=1)
knn(train=matrix(training_set[, "Lag2"]), matrix(test=test_set[, "Lag2"]), cl=matrix(training_set[, "Direction"]), k=1)
knn(train=matrix(training_set[, "Lag2"]), test=matrix(test_set[, "Lag2"]), cl=matrix(training_set[, "Direction"]), k=1)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Lag2), k=1)
table(prediction_knn, test_set)
length(prediction_knn)
length(test_set)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Lag2), k=1)
table(prediction_knn, test_set$Direction)
prediction_knn
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=1)
table(prediction_knn, test_set$Direction)
(21+32)/(21+32+22+29)
source('~/.active-rstudio-document', echo=TRUE)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=1)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=3)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=1)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=3)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=5)
table(prediction_knn, test_set$Direction)
15+21+28+40
55/104
58/104
65/104
source('~/.active-rstudio-document', echo=TRUE)
library(mosaic)
TitanicSurvival = read.csv('../data/TitanicSurvival.csv')
# A 2x2 contingency table
getwd()
setwd("~/git/git_home/R")
library(mosaic)
TitanicSurvival = read.csv('../data/TitanicSurvival.csv')
# A 2x2 contingency table
t1 = xtabs(~sex + survived, data=TitanicSurvival)
t1
p1 = prop.table(t1, margin=1)
p1
# Calculate the relative risk of dying for both men and women
# in terms of the individual cells of the table
risk_female = p1[1,1]
risk_male = p1[2,1]
relative_risk = risk_male/risk_female
relative_risk
# Or with mosaic's function
relrisk(t1)
source('~/.active-rstudio-document', echo=TRUE)
dim(table(prediction_knn, test_set$Direction))
table(prediction_knn, test_set$Direction)[1,1]
table(prediction_knn, test_set$Direction)[2,2]
sum(table(prediction_knn, test_set$Direction))
knn_k <- function(k){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=k)
t_tmp <- table(prediction_knn, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_accuracy
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_knn, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_accuracy
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_accuracy
?qplot
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(data=k_df, geom="auto")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(data=k_df, geom="auto")
p2
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max[k_accuracy]+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
knn_k <- function(nk){
prediction_tmp <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=nk)
t_tmp <- table(prediction_tmp, test_set$Direction)
accuracy <- sum(t_tmp[1, 1], t_tmp[2, 2])/sum(t_tmp)
return(accuracy)
}
k_accuracy <- sapply(2:10, knn_k)
k_df <- data.frame(k=2:10, accuracy=k_accuracy)
p2 <- qplot(x=k, y=accuracy, data=k_df, geom="auto")
p2
cat("When k=", which.max(k_accuracy)+1, "the prediction is the most accurate.")
cat("Max accuracy is:", k_accuracy[which.max(k_accuracy)]*100, "%")
