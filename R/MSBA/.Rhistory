p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
library(compiler)
enableJIT(3)
library(dplyr)
College <- read.csv("College.csv", header=TRUE)
training_index <- sample(nrow(College), round(nrow(College)*0.8))
training_set <- College[training_index,]
test_set <- College[-training_index,]
lm_model <- lm(Apps ~ ., data=training_set[, -1])
prediction_lm <- predict(lm_model, test_set)
RMSE <- mean((prediction_lm - test_set$Apps)^2)^.5
cat("The prediction RMSE using simple linear model is", RMSE)
library(glmnet)
training_set_4ridge <- model.matrix(~., data=training_set[,-c(1, 3)])
ridge_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=0)
ridge_model_lambda <- ridge_model$lambda.1se
prediction_ridge <- predict(ridge_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_ridge - test_set$Apps)^2)^.5
cat("The prediction RMSE using Ridge regression is", RMSE)
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lambda_ind <- match(lasso_model$lambda.1se, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
cat("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
library(pls)
training_set_4pcr <- na.omit(training_set)[, -1]
set.seed(1)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pc_model$ncomp)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pc_model$ncomp)
prediction_pca <- predict(pc_model, test_set)
RMSE <- mean((prediction_pca - test_set$Apps)^2)^.5
cat("The prediction RMSE using PCA is", RMSE)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pls_model$ncomp)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pls_model$ncomp)
prediction_pls <- predict(pls_model, test_set)
RMSE <- mean((prediction_pls - test_set$Apps)^2)^.5
cat("The prediction RMSE using PLS is", RMSE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - test_set$Apps
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
source('~/.active-rstudio-document', echo=TRUE)
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
rel_RMSE_df <- data.frame("Method"=c("lm", "Lasso", "PCA"), "Rel_RMSE"=rel_RMSE)
boxplot(data.frame$Method, data.frame$Rel_RMSE)
boxplot(rel_RMSE_df$Method, rel_RMSE_df$Rel_RMSE)
boxplot(rel_RMSE_df)
boxplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
rel_RMSE_df <- data.frame("Method"=factor(c("lm", "Lasso", "PCA")), "Rel_RMSE"=rel_RMSE)
boxplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
method <- factor(c("lm", "Lasso", "PCA"))
method
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
boxplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
?boxplot
?barplot
barplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
barplot(x=rel_RMSE_df)
library(ggplot2)
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
p <- ggplot(data=rel_RMSE_df, aes(x=Method, y=Rel_RMSE, fill=Method))
p + geom_bar()
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
print(rel_RMSE_df)
mean_b
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/sd_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
print(rel_RMSE_df)
sd_b
?step
pls_fit <- plsr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set[, -c(1, 4)]))
RMSE_pcr <- mean(((prediction_pcr - test_set[, 1])*sd_b[1])^2)^0.5
cat("Partial least square regression returns an RMSE on the test set of", RMSE_pcr)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- (residual_df[, 1] - test_set[, 1])*sd_b[1]
qplot(x=Method, y=Residual, data=residual_df, geom="auto")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ISLR)
head(Weekly)
summary(Weekly)
library(ISLR)
head(Weekly)
summary(Weekly)
?structure()
structure(Weekly)
head(structure(Weekly))
dim(Weekly)
plot(Weekly$Volume)
plot(Weekly$Direction)
direction <- Weekly$Direction == "Up"
plot(direction)
abline(direction)
library(ISLR)
head(Weekly)
summary(Weekly)
co_move <- sapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
co_ove
co_move
colnames(co_move_df) <- colnames(Weekly)[2:6]
co_move_df <- data.frame(co_move)
colnames(co_move_df) <- colnames(Weekly)[2:6]
sumamry(co_move_df)
summary(co_move)
summary(co_move_df)
table(co_move)
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- lapply(Weekly[, c(2:6, 8)], function(v) v>0)
p1 <- ggplot(data=direction_logic, aes(x=factor(Lag1), y=Today))
p1 + barplot()
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) v>0))
p1 <- ggplot(data=direction_logic, aes(x=factor(Lag1), y=Today))
p1 + barplot()
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) v>0))
qplot(Today~., data=direction_logic, geom="auto")
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
qplot(Today~., data=direction_logic, geom="auto")
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
# qplot(Today~., data=direction_logic, geom="auto")
p1 <- ggplot(data=direction_logic, aes(x=Lag1, y=Today))
p1 + barplot()
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
# qplot(Today~., data=direction_logic, geom="auto")
p1 <- ggplot(data=direction_logic, aes(x=Lag1, y=Today, fill=Today))
p1 + stat_summary(fun.y=sum, geom="bar")
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
# qplot(Today~., data=direction_logic, geom="auto")
p1 <- ggplot(data=direction_logic, aes(x=as.factor(Lag1), y=Today, fill=Today))
p1 + stat_summary(fun.y=sum, geom="bar")
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0)
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
# qplot(Today~., data=direction_logic, geom="auto")
# p1 <- ggplot(data=direction_logic, aes(x=as.factor(Lag1), y=Today, fill=Today))
# p1 + stat_summary(fun.y=sum, geom="bar")
p2 <- ggplot(data=co_move, aes(y=Lag1, fill=Lag1))
p2 + geom_bar()
library(ISLR)
library(dplyr)
library(ggplot2)
head(Weekly)
summary(Weekly)
co_move <- data.frame(lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0))
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
# qplot(Today~., data=direction_logic, geom="auto")
# p1 <- ggplot(data=direction_logic, aes(x=as.factor(Lag1), y=Today, fill=Today))
# p1 + stat_summary(fun.y=sum, geom="bar")
p2 <- ggplot(data=co_move, aes(y=Lag1, fill=Lag1))
p2 + geom_bar()
library(ISLR)
library(dplyr)
library(ggplot2)
library(reshape2)
head(Weekly)
summary(Weekly)
co_move <- data.frame(lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0))
direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
# qplot(Today~., data=direction_logic, geom="auto")
# p1 <- ggplot(data=direction_logic, aes(x=as.factor(Lag1), y=Today, fill=Today))
# p1 + stat_summary(fun.y=sum, geom="bar")
p2 <- ggplot(data=co_move, aes(y=Lag1, fill=Lag1))
p2 + geom_bar(stat="identity")
summary(co_move)
sapply(co_move, function(x) sum(x)/length(x))
library(ISLR)
library(dplyr)
library(ggplot2)
library(reshape2)
head(Weekly)
summary(Weekly)
co_move <- data.frame(lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0))
# direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
sapply(co_move, function(x) (sum(x)/length(x))*100%)
sapply(co_move, function(x) (sum(x)/length(x))*100%)
sapply(co_move, function(x) sum(x)/length(x))
library(ISLR)
library(dplyr)
summary(Weekly)
co_move <- data.frame(lapply(Weekly[, 2:6], function(v) v*Weekly[, 8]>0))
# direction_logic <- data.frame(lapply(Weekly[, c(2:6, 8)], function(v) (v>0)*1))
cat("The output below is the probability that the current weekly percentage return is positive given that of the previous X weeks is also positive.\n")
sapply(co_move, function(x) sum(x)/length(x))
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_points()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_point()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today))
p5 + geom_point()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today))
p5 + geom_point()
library(ggplot2)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
multiplot(p1, p2, p3, p4, p5, cols=2)
library(ggplot2)
library(gridExtra)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today, colour=colnames(data)))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
grid.arrange(p1, p2, p3, p4, p5, ncol=2)
library(ggplot2)
library(gridExtra)
library(reshape2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
grid.arrange(p1, p2, p3, p4, p5, ncol=2)
p1 <- ggplot(data=Weekly, aes(x=Lag1, y=Today))
p1 + geom_point()
p2 <- ggplot(data=Weekly, aes(x=Lag2, y=Today))
p2 + geom_point()
p3 <- ggplot(data=Weekly, aes(x=Lag3, y=Today))
p3 + geom_point()
p4 <- ggplot(data=Weekly, aes(x=Lag4, y=Today))
p4 + geom_point()
p5 <- ggplot(data=Weekly, aes(x=Lag5, y=Today, colour))
p5 + geom_point()
?glm
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binary)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binominal)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
logistic_fit
coef(logistic_fit)
predict(logistic_fit, type="response")
predict(logistic_fit, type="response")[1:10]
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
coef(logistic_fit)
cat("Print out the first 10 predictions on dataset.")
predict(logistic_fit, type="response")[1:10]
contrasts(Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
coef(logistic_fit)
cat("Print out the first 10 predictions on dataset.")
predict(logistic_fit, type="response")[1:10]
contrasts(Weekly$Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
predict(logistic_fit, type="response")[1:10]
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
sapply(predict(logistic_fit, type="response")[1:10], function(x) "Up" if x>0.5 else "Down")
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
sapply(predict(logistic_fit, type="response")[1:10], function(x) ifelse(x>0.5, "Up", "Down"))
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("Print out the first 10 predictions on dataset.")
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, Weekly$Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("The summary of the fitted model is below.")
print(summary(logistic_fit))
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, Weekly$Direction)
?table
x <- 1:4
y <- 5:8
table(x, y)
The confusion matrix has four cells. Mistakes are in the cells where the row index and column index are different. So in this case, the most common mistake is when the regression model predicts _Up_ while the actual return went _Down_ (more than 400 occurrences). In fact, the prediction model is highly biased towards _Up_ vs _Down_ `r cat(sum(prediction_logistic=="Up"), ":", sum(prediction_logistic=="Down"))`, where in reality both sides are almost equally likely.
sum(prediction_logistic=="Up")
summary(Weekly$Year)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, Weekly$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
prediction_logistic
length(prediction_logistic)
length(test_set$Direction)
cat("The prediction vs actual Direction is tabulated below.")
table(prediction_logistic, Weekly$Direction)
logistic_fit <- glm(Direction~.-Today, data=Weekly, family=binomial)
cat("The fitted coefficients of the logistic model are listed below.")
coef(logistic_fit)
cat("The response signal created by R in place of Direction is like this.")
contrasts(Weekly$Direction)
cat("The summary of the fitted model is below.")
print(summary(logistic_fit))
prediction_logistic <- sapply(predict(logistic_fit, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
cat("The prediction vs actual Direction is tabulated below.")
table(prediction_logistic, Weekly$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.-Today, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.Lag2, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, data=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~.Lag2, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, newdata=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
contrasts(training_set$Direction)
source('~/.active-rstudio-document', echo=TRUE)
training_set <- Weekly[Weekly$Year<=2008, ]
test_set <- Weekly[Weekly$Year>2008, ]
logistic_fit <- glm(Direction~Lag2, data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, newdata=test_set, type="response"), function(x) ifelse(x>0.5, "Up", "Down"))
table(prediction_logistic, test_set$Direction)
source('~/.active-rstudio-document', echo=TRUE)
(34+56)/14
(56+9)/(56+9+5+34)
?knn
?knn
library(class)
?knn
knn(train=training_set[, "Lag2"], test=test_set[, "Lag2"], cl=training_set[, "Direction"], k=1)
knn(train=matrix(training_set[, "Lag2"]), matrix(test=test_set[, "Lag2"]), cl=matrix(training_set[, "Direction"]), k=1)
knn(train=matrix(training_set[, "Lag2"]), test=matrix(test_set[, "Lag2"]), cl=matrix(training_set[, "Direction"]), k=1)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Lag2), k=1)
table(prediction_knn, test_set)
length(prediction_knn)
length(test_set)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Lag2), k=1)
table(prediction_knn, test_set$Direction)
prediction_knn
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=1)
table(prediction_knn, test_set$Direction)
(21+32)/(21+32+22+29)
source('~/.active-rstudio-document', echo=TRUE)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=1)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=3)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=1)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=3)
table(prediction_knn, test_set$Direction)
prediction_knn <- knn(train=matrix(training_set$Lag2), test=matrix(test_set$Lag2), cl=matrix(training_set$Direction), k=5)
table(prediction_knn, test_set$Direction)
15+21+28+40
55/104
58/104
65/104
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
table(prediction_logistic, test_set$Purchase)
logistic_fit <- glm(Purchase~., data=training_set, family=binomial)
prediction_logistic <- sapply(predict(logistic_fit, newdata=test_set, type="response"), function(x) ifelse(x>0.2, "Yes", "No"))
tabl1 <- table(prediction_logistic, test_set$Purchase)
tabl1
cat(100*tabl1[2,2]/sum(tabl1[2,]), "% of the predicted purchases happened in reality (logistic regression).")
sum(tabl)
sum(tabl1)
(4183+58)/4822
(4343+30)/4822
