}
par(mfrow=c(dim(Boston)[2], 1), mar=rep(1, 4))
for (i in c(1:dim(Boston[2]))){
boxplot(Boston[i], border="lightgray", col="lightgray", horizontal=TRUE, lwd=0.5)
boxplot(low_medv[i], borde="red", col="red", horizontal=TRUE, lwd=1, add=TRUE)
}
par(mfrow=c(dim(Boston)[2], 1), mar=rep(1, 4))
for (i in c(1:dim(Boston)[2])){
boxplot(Boston[i], border="lightgray", col="lightgray", horizontal=TRUE, lwd=0.5)
boxplot(low_medv[i], borde="red", col="red", horizontal=TRUE, lwd=1, add=TRUE)
}
colnames(Boston)
cat(sum(Boston[Boston$rm > 7]), "suburbs average more than seven rooms per dwelling.")
cat(sum(Boston[Boston$rm > 7]), "suburbs average more than seven rooms per dwelling.")
cat(sum(Boston[, Boston$rm > 7]), "suburbs average more than seven rooms per dwelling.")
source('~/.active-rstudio-document', echo=TRUE)
cat(sum(Boston$rm > 7), "suburbs average more than seven rooms per dwelling.")
cat(sum(Boston$rm > 7), "suburbs average more than seven rooms per dwelling.")
cat(sum(Boston$rm > 8), "suburbs average more than eight rooms per dwelling.")
more_room <- Boston[Boston$rm > 8]
more_room <- Boston[Boston$rm > 8]
Boston$rm
more_room <- Boston[Boston$rm > 8,]
summary(more_room)
summary(more_room) - summary(Boston)
par(mfrow=c(dim(Boston)[2], 1), mar=rep(1, 4))
for (i in c(1:dim(Boston)[2])){
boxplot(Boston[i], border="lightgray", col="lightgray", horizontal=TRUE, lwd=0.5)
boxplot(more_room[i], borde="green", col="green", horizontal=TRUE, lwd=1, add=TRUE)
}
colnames(Boston)
library(dplyr)
col_classes <- c("integer",
"character",
"character",
"character",
"character",
"numeric",
"character",
"character",
"character",
"character",
"character",
"character",
"character",
"character",
"character",
"numeric",
"numeric")
#read in the whole data set
cars_data <- read.csv("Cars.csv", header = T, sep = ",", na.strings = "unsp",
colClasses=col_classes)
summary(cars_data$mileage)
summary(cars_data$color)
summary(cars_data$)
summary(cars_data)
cars_data$subTrim
library(MASS)
summary(Boston)
?round
?intersect
setdiff(c(1,2,3), c(2,3,4))
setdiff(c(1,2,3), c(3,4,2))
library(MASS)
library(dplyr)
summary(Boston)
row_no <- nrow(Boston)
training_rows <- sample(row_no, round(row_no*0.8))
training_set <- Boston[training_rows,]
test_set <- setdiff(Boston, training_set)
row_no
nrow(training_set)
nrow(test_set)
summary(test_set)
lm(crim~training_set[1], data=training_set)
?lm
#setting up the working directory
#setwd("~/git/git_home/R/MSBA/")
#include dplyr library to access advanced data.frame functions
library(dplyr)
#include neuralnet library to access neural network functions
library(neuralnet)
#define the column variable types
col_classes <- c("integer",
"character",
"character",
"character",
"character",
"numeric",
"character",
"character",
"character",
"character",
"character",
"character",
"character",
"character",
"character",
"numeric",
"numeric")
#read in the whole data set
cars_data <- read.csv("Cars.csv", header = T, sep = ",", na.strings = "unsp",
colClasses=col_classes)
#this function will unfold categorical variables into different levels, NA noted as "unknown"
unfold_name <- function(variable, var_name=c("")){
subset <- as.character(unique(variable))
for (i in c(1:length(subset))){
if (is.na(subset[i])){
subset[i] <- paste("unknownn ", as.character(var_name), sep="")
}
else {
subset[i] <- paste(as.character(var_name), ": ", subset[i], sep="")
}
}
subset <- sort(subset)
return(subset)
}
#create an empty vector to store the unfolded feature names
feature_names <- c()
#store the original variable names
original_names <- colnames(cars_data)
#store the names of numerical variables
numeric_vars <- c("X", "mileage", "featureCount", "price")
#this function joins the unfolded variable names. Numeric variables remain unchanged,
#unfolded categorical variables will be expanded horizontally
for (i in c(1:ncol(cars_data))){
if (original_names[i] %in% numeric_vars){
feature_name <- original_names[i]
}
else {
feature_name <- unfold_name(cars_data[, i], original_names[i])
}
feature_names <- c(feature_names, feature_name)
}
########################################################################
#### the code below constructs new columns for unfolded variables ######
#### and a new data frame is created, including the price column. ######
#### tried to package the code in a function, but performance is  ######
#### terrible - seems multi-threading doesn't work.               ######
########################################################################
varnames <- colnames(cars_data)
varnames_logic <- feature_names[!(feature_names %in% numeric_vars)]
varnames_logic <- gsub("^.+: ", "", varnames_logic)
varnames_logic[startsWith(varnames_logic, "unknown")] <- NA
dimension <- dim(cars_data)
new_dataset <- data.frame(cars_data[, 1])
k <- 0
for (i in c(1:dimension[2])){
if (varnames[i] %in% numeric_vars){
new_dataset <- cbind(new_dataset, cars_data[, i])
}
else {
for (j in c(1:length(unique(cars_data[,i])))){
pending_col <- cars_data[, i]
if (is.na(varnames_logic[j+k])){
pending_col[!is.na(pending_col)] <- FALSE
pending_col[is.na(pending_col)] <- TRUE
}
else {
pending_col[is.na(pending_col)] <- FALSE
pending_col <- (pending_col == varnames_logic[j+k])
}
new_dataset <- cbind(new_dataset, pending_col)
}
k <- k + j
}
}
clean_dataset <- new_dataset[, 2:ncol(new_dataset)]
colnames(clean_dataset) <- feature_names
########################################################################
########################################################################
########################################################################
########################################################################
#first scale variables
#now split the training data and cross-validation data
counts <- nrow(clean_dataset)
col_num <- ncol(clean_dataset)
training_index <- sample(counts, round(counts*0.8))
training_set <- clean_dataset[training_index,]
validation_set <- clean_dataset[-training_index,]
#now split X and Y
X_train <- training_set[, -col_num]
Y_train <- training_set[, c(1, col_num)]
X_cv <- validation_set[, -col_num]
Y_cv <- validation_set[, c(1, col_num)]
# training_set_matrix <- as.numeric(as.matrix(training_set))
# training_set_matrix[training_set_matrix == TRUE] <- 1
# training_set_matrix[training_set_matrix == FALSE] <- 0
# training_set_matrix[is.na(training_set_matrix)] <- 0
# training_set_org <- data.frame(training_set_matrix)
# dim(training_set_org)
# summary(training_set_org)
formula_expression <- "`X` ~ `trim: 320`"
for (i in c(3:ncol(training_set))){
variable_quote <- paste("`", names(training_set)[i], "`", sep="")
formula_expression <- paste(formula_expression, variable_quote, sep="+")
}
formula <- as.formula(formula_expression)
training_set_converted <- model.matrix(X~., training_set)
for (i in c(1:ncol(training_set_converted))){
colnames(training_set_converted)[i] <- gsub("`|TRUE", "", colnames(training_set_converted)[i])
}
training_set_converted <- data.frame(training_set_converted)
training_set_converted$mileage <- log(training_set_converted$mileage)
training_set_converted$featureCount <- training_set_converted$featureCount^.5
# formula_expression <- "price ~ `trim..320`"
#
# for (i in c(3:(ncol(training_set_converted)-1))){
#     variable_quote <- paste("`", colnames(training_set_converted)[i], "`", sep="")
#     formula_expression <- paste(formula_expression, variable_quote, sep="+")
# }
#
# formula <- as.formula(formula_expression)
# counting <- 0
#
# for (i in c(1:ncol(training_set_converted))){
#     counting <- counting + sum(is.na(training_set_converted[,i]))
# }
#
# print(counting)
# nn <- neuralnet(
#     formula=formula,
#     data=training_set_converted,
#     hidden=10,
#     rep=5,
#     stepmax=1e+06,
#     threshold=0.01,
#     algorithm="backprop",
#     learningrate=0.01,
#     linear.output=TRUE
#     )
#
# head(nn$response)
#
# nn$act.fct
# summary(nn$net.result)
lm_ridge_model <- lm.ridge(price~., data_training_set_converted)
summary((lm_ridge_model$residuals^2)^.5)
lm_ridge_model <- lm.ridge(price~., data=training_set_converted)
lm_ridge_model <- lm.ridge(price~mileage, data=training_set_converted)
lm_ridge_model <- lm.ridge(price~., data=training_set_converted)
formula_expression <- "price ~ `trim..320`"
for (i in c(3:(ncol(training_set_converted)-1))){
variable_quote <- paste("`", colnames(training_set_converted)[i], "`", sep="")
formula_expression <- paste(formula_expression, variable_quote, sep="+")
}
formula <- as.formula(formula_expression)
lm_ridge_model <- lm.ridge(formula, data=training_set_converted)
summary((lm_ridge_model$residuals^2)^.5)
lm_ridge_model$residuals
lm_ridge_model
names(lm_ridge_model)
lm_ridge_model$coef
lm_ridge_model$scales
lm_ridge_model$lambda
lm_ridge_model$ym
lm_ridge_model$xm
lm_ridge_model <- lm.ridge(price~mileage, data=training_set_converted)
lm_ridge_model <- lm.ridge(price~mileage+`trim: 320`, data=training_set_converted)
lm_ridge_model <- lm.ridge(price~mileage+`trim..320`, data=training_set_converted)
lm_ridge_model$coef
?matrix()
matrix(c("a", "b", "c", "d", 1:4), nrow =4 , ncol=2)
ma <- matrix(c("a", "b", "c", "d", 1:4), nrow =4 , ncol=2)
model.matrix(ma)
ma  <- data.frame(ma)
ma
model.matrix(ma)
?plot
?abline
library(MASS)
library(dplyr)
summary(Boston)
row_no <- nrow(Boston)
training_rows <- sample(row_no, round(row_no*0.8))
training_set <- Boston[training_rows,]
test_set <- setdiff(Boston, training_set)
names(lm)
par(mfrow=c(ncol(Boston)-1,1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste(colnames(Boston)[i], "~ crim")
abline(lm_model$coef[1], lm_model$coef[2], )
}
par(mfrow=c(ncol(Boston)-1,1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste(colnames(Boston)[i], "~ crim"))
abline(lm_model$coef[1], lm_model$coef[2], )
}
par(mfrow=c(ncol(Boston)-1,1), mar=rep(1, 4)
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
par(mfrow=c(ncol(Boston)-1,1), mar=rep(1, 4))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste(colnames(Boston)[i], "~ crim"))
abline(lm_model$coef[1], lm_model$coef[2], )
}
par(mfrow=c(4, 4), mar=rep(1, 4))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste(colnames(Boston)[i], "~ crim"))
abline(lm_model$coef[1], lm_model$coef[2], )
}
par(mfrow=c(4, 4), mar=rep(1, 4))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]))
abline(lm_model$coef[1], lm_model$coef[2], )
}
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
}
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
}
```
lm_model$coefficients
confint(lm_model$coefficients)
confint(lm_model, level=0.95)
confint(lm_model, level=0.95)[, 2]
confint(lm_model, level=0.95)[2,]
data.frame(confint(lm_model, level=0.95)[2,])
data.frame()
empty_df <- data.frame()
rbind(empty_df, confint(lm_model, level=0.95)[2,])
?rownames
rownames(confint_df) <- colanmes(Boston)[-"crim"]
rownames(confint_df) <- colnames(Boston)[-"crim"]
rownames(confint_df) <- colnames(Boston)[!"crim"]
rownames(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
confint_df <- data.frame()
colnames(confint_df) <- c("2.5%", "97.5%")
confint_df <- data.frame(row.names=c(colnames(Boston)[colnames(Boston)!="crim"]), col.names=c("2.5%", "97.5%"))
library(MASS)
library(dplyr)
summary(Boston)
row_no <- nrow(Boston)
training_rows <- sample(row_no, round(row_no*0.8))
training_set <- Boston[training_rows,]
test_set <- setdiff(Boston, training_set)
confint_df <- data.frame()
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, lm_model$coef[2,])
}
colnames(confint_df) <- c("2.5%", "97.5%")
rownames(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
library(MASS)
library(dplyr)
summary(Boston)
row_no <- nrow(Boston)
training_rows <- sample(row_no, round(row_no*0.8))
training_set <- Boston[training_rows,]
test_set <- setdiff(Boston, training_set)
confint_df <- data.frame()
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, lm_model$coef[2,])
}
dim(lm_model$coefficients[2,])
dim(lm_model$coefficients)
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, lm_model$coefficients[2,])
}
col.names(confint_df) <- c("2.5%", "97.5%")
row.names(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
lm_model
lm_model$coef
lm_model$coef[1,]
dim(lm_model$coef)
data.frame(dim(lm_model$coef))
data.frame(lm_model$coef)
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, confint(lm_model)[2,])
}
col.names(confint_df) <- c("2.5%", "97.5%")
row.names(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, confint(lm_model)[2,])
}
colnames(confint_df) <- c("2.5%", "97.5%")
row.names(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
print(dim(confint_df))
confint(lm_model)
confint(lm_model)[2,]
confint_df <- data.frame()
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, confint(lm_model)[2,])
}
print(dim(confint_df))
colnames(confint_df) <- c("2.5%", "97.5%")
row.names(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
confint_df
print(confint_df)
lm_model_multiple <- lm(crim~., data=training_set)
print(confint(lm_model_multiple))
lm_model$r.squared
lm_model$coefficients
lm_model$residuals
lm_model$terms
lm_model$call
lm_model$effects
lm_model$rank
lm_model$assign
lm_model$qr
lm_model$df.residual
lm_model$xlevels
lm_model$model
lm_model_multiple <- lm(crim~., data=training_set)
print(confint(lm_model_multiple))
confint_df <- data.frame()
par(mfrow=c(4, 4), mar=c(2, 1, 2, 1))
for (i in c(1:ncol(Boston))){
if (colnames(Boston)[i]=="crim"){
next
}
formula <- as.formula(paste("crim~", colnames(Boston)[i]))
lm_model <- lm(formula, data=training_set)
plot(y=Boston$crim, x=Boston[,i], main=paste("crim ~", colnames(Boston)[i]), pch=1, col="lightgray")
abline(lm_model$coef[1], lm_model$coef[2], col="red")
confint_df <- rbind(confint_df, confint(lm_model)[2,])
}
print(dim(confint_df))
colnames(confint_df) <- c("2.5%", "97.5%")
row.names(confint_df) <- colnames(Boston)[colnames(Boston)!="crim"]
print(confint_df)
lm_model_multiple <- lm(crim~., data=training_set)
print(confint(lm_model_multiple))
