}
Boston_std <- stdize(Boston)
training_index <- sample(length(Boston), round(length(Boston)*0.8))
training_set <- Boston_std[training_index,]
test_set <- Boston_std[-training_index,]
lasso_fit <- cv.glmnet(stdize(training_set)[, -match("crim", colnames(training_set))],
y=training_set[, "crim"],
nfold=length(training_index),
alpha=1)
prediction_lasso <- predict(lasso_fit, stdize(test_set)[, -1])
RMSE <- mean((prediction_lasso - test_set$crim)^2)^0.5
RMSE
lasso_fit <- cv.glmnet(training_set[, -match("crim", colnames(training_set))],
y=training_set[, "crim"],
nfold=length(training_index),
alpha=1)
prediction_lasso <- predict(lasso_fit, test_set)
prediction_lasso <- predict(lasso_fit, test_set[, -1])
RMSE <- mean((prediction_lasso - test_set$crim)^2)^0.5
RMSE <- mean((prediction_lasso - test_set[, 1])^2)^0.5
RMSE
training_set_4pcr <- na.omit(training_set) #drop `chas` since its non-zero values are sparse
pc_fit <- pcr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set))
RMSE <- mean((prediction_pcr - test_set[, 1])^2)^0.5
RMSE
training_set_4pcr <- as.data.frame(na.omit(training_set)) #drop `chas` since its non-zero values are sparse
pc_fit <- pcr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set))
RMSE <- mean((prediction_pcr - test_set[, 1])^2)^0.5
RMSE
training_set_4pcr <- as.data.frame(na.omit(training_set[, -4])) #drop `chas` since its non-zero values are sparse
pc_fit <- pcr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set))
RMSE <- mean((prediction_pcr - test_set[, 1])^2)^0.5
RMSE
training_set_4pcr <- as.data.frame(na.omit(training_set[, -4])) #drop `chas` since its non-zero values are sparse
pc_fit <- pcr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set[, -4]))
RMSE <- mean((prediction_pcr - test_set[, 1])^2)^0.5
RMSE
training_set_4pcr <- as.data.frame(na.omit(training_set[, -4])) #drop `chas` since its non-zero values are sparse
pc_fit <- pcr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set[, -c(1, 4)]))
RMSE_pcr <- mean((prediction_pcr - test_set[, 1])^2)^0.5
RMSE_pcr
pc_fit
names(pc_fit)
pc_fit$coefficients
pc_fit$scores
?pcr
names(pcr_fit)
names(pc_fit)
pc_fit$loadings
pc_fit$projection
pc_fit$Xmeans
pc_fit$fit.time
pc_fit$ncomp
pc_fit$method
?pcr
names(pc_fit)
pc_fit$scale
pc_fit$validation
training_set_4pcr <- as.data.frame(na.omit(training_set[, -4])) #drop `chas` since its non-zero values are sparse
pc_fit <- pcr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set[, -c(1, 4)]))
RMSE_pcr <- mean((prediction_pcr - test_set[, 1])^2)^0.5
RMSE_pcr
# form <- as.formula(paste("crim~.*", colnames(training_set)[i+1]))
lm_fit <- lm(crim~., data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, test_set)
RMSE <- mean((prediction_lm-test_set$crim)^2)^.5
print(RMSE)
lm_fit <- lm(crim~., data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean((prediction_lm-test_set[, 1])^2)^.5
print(RMSE_lm)
as.data.frame(training_set)
lm_fit <- lm(crim~.*nox, data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean((prediction_lm-test_set[, 1])^2)^.5
print(RMSE_lm)
lm_fit <- lm(crim~.*lstat, data=as.data.frame(training_set))
lm_fit <- lm(crim~.*lstat, data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean((prediction_lm-test_set[, 1])^2)^.5
print(RMSE_lm)
lm_fit <- lm(crim~.*medv, data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean((prediction_lm-test_set[, 1])^2)^.5
print(RMSE_lm)
lm_fit <- lm(crim~., data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean((prediction_lm-test_set[, 1])^2)^.5
print(RMSE_lm)
lm_fit <- lm(crim~., data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean((prediction_lm-test_set[, 1])^2)^.5
cat("The plain linear regression method returns an RMSE on the test set of", RMSE_lm)
?cv.glmnet
library(glmnet)
?cv.glmnet
library(compiler)
enableJIT(3)
library(dplyr)
College <- read.csv("College.csv", header=TRUE)
training_index <- sample(nrow(College), round(nrow(College)*0.8))
training_set <- College[training_index,]
test_set <- College[-training_index,]
lm_model <- lm(Apps ~ ., data=training_set[, -1])
prediction_lm <- predict(lm_model, test_set)
RMSE <- mean((prediction_lm - test_set$Apps)^2)^.5
cat("The prediction RMSE using simple linear model is", RMSE)
library(glmnet)
training_set_4ridge <- model.matrix(~., data=training_set[,-c(1, 3)])
ridge_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=0)
ridge_model_lambda <- ridge_model$lambda.1se
prediction_ridge <- predict(ridge_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_ridge - test_set$Apps)^2)^.5
cat("The prediction RMSE using Ridge regression is", RMSE)
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print(head(data.frame("Lambda"=lasso_model$lambda, "Non-zero coefs"=lasso_model$nzero)))
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print("Non-zero coefs at the chosen lambda", lasso_model$nzero[lasso_model_lambda])
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print("Non-zero coefs at the chosen lambda", lasso_model$nzero[lasso_model_lambda,])
lasso_model$nzero
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print(data.frame("Lambda"=lasso_model$lambda, "Non-zero coefs"=lasso_model$nzero)[Lambda==lasso_model_lambda,])
dim(lasso_model$nzero)
length(lasso_model$nzero)
?match
print("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[lambda_ind])
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
lambda_ind <- match(lasso_model_lambda, lasso_model$lambda.1se)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[lambda_ind])
lambda_ind
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
lambda_ind <- match(lasso_model_lambda, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[lambda_ind])
lasso_model$lambda
lasso_model$lambda.1se
match(lasso_model$lambda.1se, lasso_model$lambda)
lasso_model$nzero
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
lambda_ind <- match(lasso_model_lambda, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[lambda_ind])
lasso_model$nzero[30]
typeof(lasso_model$nzero[30])
lasso_model$nzero[[30]]
print("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
lambda_ind <- match(lasso_model_lambda, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
print("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lasso_model_lambda <- lasso_model$lambda.1se
lambda_ind <- match(lasso_model_lambda, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
cat("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lambda_ind <- match(lasso_model$lambda.1se, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
cat("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
lasso_model$lambda
lasso_model$nzero
lambda_ind
library(pls)
training_set_4pcr <- na.omit(training_set)[, -1]
set.seed(1)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pc_model$ncomp)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pc_model$ncomp)
prediction_pca <- predict(pc_model, test_set)
RMSE <- mean((prediction_pca - test_set$Apps)^2)^.5
cat("The prediction RMSE using PCA is", RMSE)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pls_model$ncomp)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pls_model$ncomp)
prediction_pls <- predict(pls_model, test_set)
RMSE <- mean((prediction_pls - test_set$Apps)^2)^.5
cat("The prediction RMSE using PLS is", RMSE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - rep(test_set$Apps, 5)
p <- ggplot(data=residual_df, aes(x=Method, y=Residual, fill=Method))
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - rep(test_set$Apps, 5)
p <- ggplot(data=residual_df, aes(x=Method, y=Residual, fill=Method), na.rm=TRUE)
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - rep(test_set$Apps, 5)
p <- ggplot(data=residual_df, aes_string(x=Method, y=Residual, fill=Method), na.rm=TRUE)
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(p)
p
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - rep(test_set$Apps, 5)
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p <- p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - rep(test_set$Apps, 5)
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p <- p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
library(compiler)
enableJIT(3)
library(dplyr)
College <- read.csv("College.csv", header=TRUE)
training_index <- sample(nrow(College), round(nrow(College)*0.8))
training_set <- College[training_index,]
test_set <- College[-training_index,]
lm_model <- lm(Apps ~ ., data=training_set[, -1])
prediction_lm <- predict(lm_model, test_set)
RMSE <- mean((prediction_lm - test_set$Apps)^2)^.5
cat("The prediction RMSE using simple linear model is", RMSE)
library(glmnet)
training_set_4ridge <- model.matrix(~., data=training_set[,-c(1, 3)])
ridge_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=0)
ridge_model_lambda <- ridge_model$lambda.1se
prediction_ridge <- predict(ridge_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_ridge - test_set$Apps)^2)^.5
cat("The prediction RMSE using Ridge regression is", RMSE)
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lambda_ind <- match(lasso_model$lambda.1se, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
cat("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
library(pls)
training_set_4pcr <- na.omit(training_set)[, -1]
set.seed(1)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pc_model$ncomp)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pc_model$ncomp)
prediction_pca <- predict(pc_model, test_set)
RMSE <- mean((prediction_pca - test_set$Apps)^2)^.5
cat("The prediction RMSE using PCA is", RMSE)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pls_model$ncomp)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pls_model$ncomp)
prediction_pls <- predict(pls_model, test_set)
RMSE <- mean((prediction_pls - test_set$Apps)^2)^.5
cat("The prediction RMSE using PLS is", RMSE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - rep(test_set$Apps, 5)
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p <- p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
p
names(p)
p$facet
p$labels
p$scales
p$data
p
names(p)
p$layers
p$mapping
p$theme
p$coordinates
p$plot_env
Boston
head(Boston)
stdize(Boston)
head(stdize(Boston))
lm_fit <- lm(crim~., data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean(((prediction_lm-test_set[, 1])*sd_b[1])^2)^.5
cat("The plain linear regression method returns an RMSE on the test set of", RMSE_lm)
rm(list=ls())
library(MASS)
library(glmnet)
library(pls)
mean_b <- sapply(Boston, mean)
sd_b <- sapply(Boston, sd)
stdize <- function(dfx, meanx=mean_b, sdx=sd_b){
mean_mat <- matrix(rep(meanx, nrow(dfx)), nrow=nrow(dfx), byrow=TRUE)
sd_mat <- matrix(rep(sdx, nrow(dfx)), nrow=nrow(dfx), byrow=TRUE)
std_dfx <- (dfx - mean_mat)/sd_mat
mtx <- as.matrix(std_dfx)
# mtx <- mtx[, colSums(is.na(mtx))==0]
return(mtx)
}
Boston_std <- stdize(Boston)
training_index <- sample(length(Boston), round(length(Boston)*0.8))
training_set <- Boston_std[training_index,]
test_set <- Boston_std[-training_index,]
lm_fit <- lm(crim~., data=as.data.frame(training_set))
prediction_lm <- predict(lm_fit, as.data.frame(test_set))
RMSE_lm <- mean(((prediction_lm-test_set[, 1])*sd_b[1])^2)^.5
cat("The plain linear regression method returns an RMSE on the test set of", RMSE_lm)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - test_set$Apps
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - test_set$Apps
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
library(compiler)
enableJIT(3)
library(dplyr)
College <- read.csv("College.csv", header=TRUE)
training_index <- sample(nrow(College), round(nrow(College)*0.8))
training_set <- College[training_index,]
test_set <- College[-training_index,]
lm_model <- lm(Apps ~ ., data=training_set[, -1])
prediction_lm <- predict(lm_model, test_set)
RMSE <- mean((prediction_lm - test_set$Apps)^2)^.5
cat("The prediction RMSE using simple linear model is", RMSE)
library(glmnet)
training_set_4ridge <- model.matrix(~., data=training_set[,-c(1, 3)])
ridge_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=0)
ridge_model_lambda <- ridge_model$lambda.1se
prediction_ridge <- predict(ridge_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_ridge - test_set$Apps)^2)^.5
cat("The prediction RMSE using Ridge regression is", RMSE)
lasso_model <- cv.glmnet(x=training_set_4ridge, y=training_set$Apps, nfolds=10, alpha=1)
lambda_ind <- match(lasso_model$lambda.1se, lasso_model$lambda)
prediction_lasso <- predict(lasso_model, model.matrix(Apps~., test_set[, -1]))
RMSE <- mean((prediction_lasso - test_set$Apps)^2)^.5
cat("The prediction RMSE using Lasso regression is", RMSE)
cat("Non-zero coefs corresponding to the chosen lambda is", lasso_model$nzero[[lambda_ind]])
library(pls)
training_set_4pcr <- na.omit(training_set)[, -1]
set.seed(1)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pc_model$ncomp)
pc_model <- pcr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pc_model$ncomp)
prediction_pca <- predict(pc_model, test_set)
RMSE <- mean((prediction_pca - test_set$Apps)^2)^.5
cat("The prediction RMSE using PCA is", RMSE)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, validation="CV")
cat("The M chosen by cross-validation is", pls_model$ncomp)
pls_model <- plsr(Apps~., data=training_set_4pcr, scale=TRUE, ncomp=pls_model$ncomp)
prediction_pls <- predict(pls_model, test_set)
RMSE <- mean((prediction_pls - test_set$Apps)^2)^.5
cat("The prediction RMSE using PLS is", RMSE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_ridge, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- residual_df[, 1] - test_set$Apps
p <- ggplot(data=residual_df, aes_string(x="Method", y="Residual", fill="Method"), na.rm=TRUE)
p + geom_boxplot() + scale_y_continuous() + scale_x_discrete()
source('~/.active-rstudio-document', echo=TRUE)
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
rel_RMSE_df <- data.frame("Method"=c("lm", "Lasso", "PCA"), "Rel_RMSE"=rel_RMSE)
boxplot(data.frame$Method, data.frame$Rel_RMSE)
boxplot(rel_RMSE_df$Method, rel_RMSE_df$Rel_RMSE)
boxplot(rel_RMSE_df)
boxplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
rel_RMSE_df <- data.frame("Method"=factor(c("lm", "Lasso", "PCA")), "Rel_RMSE"=rel_RMSE)
boxplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
method <- factor(c("lm", "Lasso", "PCA"))
method
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
boxplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
?boxplot
?barplot
barplot(x=rel_RMSE_df$Method, y=rel_RMSE_df$Rel_RMSE)
barplot(x=rel_RMSE_df)
library(ggplot2)
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
p <- ggplot(data=rel_RMSE_df, aes(x=Method, y=Rel_RMSE, fill=Method))
p + geom_bar()
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/mean_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
print(rel_RMSE_df)
mean_b
rel_RMSE <- sapply(c(RMSE_lm, RMSE_lasso, RMSE_pcr), function(x) x/sd_b[1])
method <- factor(c("lm", "Lasso", "PCA"))
rel_RMSE_df <- data.frame("Method"=method, "Rel_RMSE"=rel_RMSE)
print(rel_RMSE_df)
sd_b
?step
pls_fit <- plsr(crim~., data=training_set_4pcr, scale=TRUE, validation="CV" )
prediction_pcr <- predict(pc_fit, na.omit(test_set[, -c(1, 4)]))
RMSE_pcr <- mean(((prediction_pcr - test_set[, 1])*sd_b[1])^2)^0.5
cat("Partial least square regression returns an RMSE on the test set of", RMSE_pcr)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(ggplot2)
Residual <- c(prediction_lm, prediction_lasso, prediction_pca, prediction_pls)
Method <- c(rep("lm", length(prediction_lm)),
rep("ridge", length(prediction_ridge)),
rep("lasso", length(prediction_lasso)),
rep("pca", length(prediction_pca)),
rep("pls", length(prediction_pls)))
Method <- as.factor(Method)
residual_df <- data.frame(Residual, Method)
residual_df[, 1] <- (residual_df[, 1] - test_set[, 1])*sd_b[1]
qplot(x=Method, y=Residual, data=residual_df, geom="auto")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
