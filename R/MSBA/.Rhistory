return_bootstrap
}
}
lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
sample_return <- function(v){
boot <- foreach(i=1, .combine="c") %do% {
return_bootstrap <- resample(v$Return, 20, replace=TRUE)
t(return_bootstrap)
}
}
df_return <- lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
df_return
dim(df_return)
sample_return <- function(v){
boot <- foreach(i=1, .combine="cbind") %do% {
return_bootstrap <- resample(v$Return, 20, replace=TRUE)
data.frame(return_bootstrap)
}
}
df_return <- lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
dim(df_return)
sample_return <- function(v){
boot <- foreach(i=1, .combine="cbind") %do% {
return_bootstrap <- resample(v$Return, 20, replace=TRUE)
data.frame(t(return_bootstrap))
}
}
df_return <- lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
dim(df_return)
df_return
sample_return <- function(v){
boot <- foreach(i=1, .combine="cbind") %do% {
return_bootstrap <- t(resample(v$Return, 20, replace=TRUE))
data.frame(return_bootstrap)
}
}
df_return <- lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
df_return
sample_return <- function(v){
boot <- foreach(i=1, .combine="c") %do% {
return_bootstrap <- t(resample(v$Return, 20, replace=TRUE))
return_bootstrap
}
}
df_return <- lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
df_return
sample_return <- function(v){
boot <- foreach(i=1, .combine="c") %do% {
return_bootstrap <- resample(v$Return, 20, replace=TRUE)
return_bootstrap
}
}
df_return <- lapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
length(df_return)
data.frame(df_return)
data.frame(df_return, nrow=20)
data.frame(df_return, n.row=20)
sample_return <- function(v){
boot <- foreach(i=1, .combine="c") %do% {
return_bootstrap <- resample(v$Return, 20, replace=TRUE)
return_bootstrap
}
}
df_return <- sapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
# colnames(df_return) <-
df_return
sample_return <- function(v){
boot <- foreach(i=1, .combine="c") %do% {
return_bootstrap <- resample(v$Return, 20, replace=TRUE)
return_bootstrap
}
}
df_return <- sapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
colnames(df_return) <- c("SPY", "TLT", "LQD", "EEM", "VNQ")
df_return
df_return <- as.data.frame(df_return)
df_return
c(1,2,3)*c(1,2,3)
return_neutral <- rep(0.2, 5) * df_return
return_neutral
?stack
stack(df_return)
colSums(df_return)
rowSums(df_return)
return_neutral <- rowSums(rep(0.2, 5) * df_return)
return_neutral
return_safe <- rowSums(c(0.1, 0.4, 0.5) * select(df_return, SPY, TLT, LQD))
return_safe
return_aggressive <- rowSums(c(0.6, 0.4) * select(df_return, EEM, VNQ))
return_aggressive
portfolio_return <- cbind(return_neutral, return_safe, return_aggressive)
portfolio_return
colnames(portfolio_return) <- c("neutral", "safe", "aggressive")
return_neutral <- rowSums(rep(0.2, 5) * df_return)
return_safe <- rowSums(c(0.1, 0.4, 0.5) * select(df_return, SPY, TLT, LQD))
return_aggressive <- rowSums(c(0.6, 0.4) * select(df_return, EEM, VNQ))
portfolio_return <- cbind(return_neutral, return_safe, return_aggressive)
colnames(portfolio_return) <- c("neutral", "safe", "aggressive")
ggplot(data=portfolio_return, aes(y=neutral)) +
geom_boxplot(aes(x="neutral"), color="blue", alpha=0.5) +
geom_boxplot(aes(x="safe", y=safe), color="green", alpha=0.5) +
geom_boxplot(aes(x="aggressive", y=aggressive), color="red", alpha=0.5)
return_neutral <- rowSums(rep(0.2, 5) * df_return)
return_safe <- rowSums(c(0.1, 0.4, 0.5) * select(df_return, SPY, TLT, LQD))
return_aggressive <- rowSums(c(0.6, 0.4) * select(df_return, EEM, VNQ))
portfolio_return <- as.data.frame(cbind(return_neutral, return_safe, return_aggressive))
colnames(portfolio_return) <- c("neutral", "safe", "aggressive")
ggplot(data=portfolio_return, aes(y=neutral)) +
geom_boxplot(aes(x="neutral"), color="blue", alpha=0.5) +
geom_boxplot(aes(x="safe", y=safe), color="green", alpha=0.5) +
geom_boxplot(aes(x="aggressive", y=aggressive), color="red", alpha=0.5)
?quantile
quantile(return_neutral, probs=0.05)
quantile(return_aggressive, probs=0.05)
sapply(portfolio_return, quantile(probs=0.05))
sapply(portfolio_return, function(v) quantile(x=v, probs=0.05))
portfolio_VaR <- 1e5 * (1- sapply(portfolio_return, function(v) quantile(x=v, probs=0.05)))
portfolio_VaR
portfolio_VaR <- 20 * 1e5 * (1- sapply(portfolio_return, function(v) quantile(x=v, probs=0.05)))
portfolio_VaR
prod(c(1,2))
sample_return <- function(v){
boot <- foreach(i=1:1000, .combine="c") %do% {
daybyday_bootstrap <- resample(v$Return, 20, replace=TRUE)
prod(daybyday_bootstrap)
}
}
df_return <- sapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), sample_return)
colnames(df_return) <- c("SPY", "TLT", "LQD", "EEM", "VNQ")
df_return <- as.data.frame(df_return)
df_return
return_neutral <- rowSums(rep(0.2, 5) * df_return)
return_safe <- rowSums(c(0.1, 0.4, 0.5) * select(df_return, SPY, TLT, LQD))
return_aggressive <- rowSums(c(0.6, 0.4) * select(df_return, EEM, VNQ))
portfolio_return <- as.data.frame(cbind(return_neutral, return_safe, return_aggressive))
colnames(portfolio_return) <- c("neutral", "safe", "aggressive")
ggplot(data=portfolio_return, aes(y=neutral)) +
geom_boxplot(aes(x="neutral"), color="blue", alpha=0.5) +
geom_boxplot(aes(x="safe", y=safe), color="green", alpha=0.5) +
geom_boxplot(aes(x="aggressive", y=aggressive), color="red", alpha=0.5)
portfolio_VaR <- 20 * 1e5 * (1- sapply(portfolio_return, function(v) quantile(x=v, probs=0.05)))
portfolio_VaR
portfolio_VaR <- 1e5 * (1- sapply(portfolio_return, function(v) quantile(x=v, probs=0.05)))
portfolio_VaR
annual_return <- function(v){
boot <- foreach(i=1:1000, .combine="c") %do% {
daybyday_bootstrap <- resample(v$Return, 365, replace=TRUE)
prod(daybyday_bootstrap)
}
}
annual_return <- sapply(list(df_SPY, df_TLT, df_LQD, df_EEM, df_VNQ), annual_return)
colnames(annual_return) <- c("SPY", "TLT", "LQD", "EEM", "VNQ")
annual_return <- as.data.frame(annual_return)
annual_return_neutral <- rowSums(rep(0.2, 5) * annual_return)
annual_return_safe <- rowSums(c(0.1, 0.4, 0.5) * select(annual_return, SPY, TLT, LQD))
annual_return_aggressive <- rowSums(c(0.6, 0.4) * select(annual_return, EEM, VNQ))
portfolio_annual_return <- as.data.frame(cbind(annual_return_neutral, annual_return_safe, annual_return_aggressive))
colnames(portfolio_annual_return) <- c("neutral", "safe", "aggressive")
ggplot(data=portfolio_annual_return, aes(y=neutral)) +
geom_boxplot(aes(x="neutral"), color="blue", alpha=0.5) +
geom_boxplot(aes(x="safe", y=safe), color="green", alpha=0.5) +
geom_boxplot(aes(x="aggressive", y=aggressive), color="red", alpha=0.5)
sapply(portfolio_annual_return, mean)
sapply(portfolio_annual_return, sd)
rbind(sapply(portfolio_annual_return, mean), sapply(portfolio_annual_return, sd))
row.names(portfolio_summary) <- c("Mean Return", "Std")
portfolio_summary <- rbind(sapply(portfolio_annual_return, mean), sapply(portfolio_annual_return, sd))
row.names(portfolio_summary) <- c("Mean Return", "Std")
portfolio_summary
summary(tweets)
tweets <- read.csv("~/home/git/git_home/data/social_marketing.csv")
tweets <- read.csv("~/git/git_home/data/social_marketing.csv")
summary(tweets)
dim(tweets)
library(flexclust)
library(flexclust)
library(foreach)
# Load, center and scale the data
cars = read.csv('~/git/git_home/data/cars.csv', header=TRUE)
cars
X = cars[,-(1:9)]
X = scale(X, center=TRUE, scale=TRUE)
mu = attr(X,"scaled:center")
sigma = attr(X,"scaled:scale")
mu
sigma
clust1 = kmeans(X, 6, nstart=1)
clust1$totss
clust1$betweenss
clust1$withinss
clust1$size
# Using kmeans++ initialization
clust2 = kcca(X, k=6, family=kccaFamily("kmeans"),
control=list(initcent="kmeanspp"))
# This package has a different interface for accessing model output
parameters(clust2)
clust2@clusinfo
# Compare versus within-cluster average distances from the first run
clust1$withinss
# Uh-oh, where is this for kmeans++?
str(clust2)
# Roll our own function
centroids = parameters(clust2)
centroids
kpp_residualss = foreach(i=1:nrow(X), .combine='c') %do% {
x = X[i,]
a = clust2@cluster[i]
m = centroids[a,]
sum((x-m)^2)
}
sum(kpp_residualss)
clust1$tot.withinss
print(apply(parameters(kmeansPP_we8there),1,function(x) colnames(Z)[order(x, decreasing=TRUE)[1:10]]))
distEuclidean(Z, parameters(kmeansPP_we8there))
summary(tweets)
lapply(tweets, function(v)ifelse(v>0, 1, 0))
summary(tweets)
lapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))
tweets_count <- lapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))
summary(tweets)
summary(tweets_count)
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))
summary(tweets_count)
mean(tweets_count)
sapply(tweets_count, mean)
dim(tweets_count)
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))
tweets_count <- as.data.frame(tweets_count)
sapply(tweets_count, mean)
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))[, -1]
tweets_count <- as.data.frame(tweets_count)
sapply(tweets_count, mean)
library(reshape)
library(reshape2)
?melt
melt(tweets_count)
hist(melt(tweets_count))
tweets_melt <- melt(tweets_count, id.vars="category", variable.name="count")
tweets_melt <- melt(tweets_count, id.vars="category", variable.name="count")
tweets_melt <- melt(tweets_count, id.vars=" ", variable.name="count")
tweets_melt <- melt(tweets_count, value.name="value")
tweets_melt
head(tweets_melt)
hist(tweets_melt$variable)
ggplot(data=tweets_melt, aes(x=variable, y=value)) + geom_line(stat = "sum")
ggplot(data=tweets_melt, aes(x=variable, y=value)) + geom_line(stat = "mean")
ggplot(data=tweets_melt, aes(x=variable, y=value)) + geom_line()
ggplot(data=tweets_melt, aes(x=variable, y=value)) + geom_bar()
ggplot(data=tweets_melt, aes(x=variable, y=value)) + geom_bar(stat="identity")
ggplot(data=tweets_melt, aes(x=variable, y=value)) + geom_bar(stat="identity", fill=variable)
ggplot(data=tweets_melt, aes(x=variable, y=value, fill=variable)) + geom_bar(stat="identity")
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))[, -1]
tweets_count <- as.data.frame(tweets_count)
# sapply(tweets_count, mean)
tweets_melt <- melt(tweets_count, value.name="value")
ggplot(data=tweets_melt, aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=" ", y=" ")
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))[, -1]
tweets_count <- as.data.frame(tweets_count)
# sapply(tweets_count, mean)
tweets_melt <- melt(tweets_count, value.name="value")
ggplot(data=tweets_melt, aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=" ", y=" ") +
scale_x_discrete(breaks=[])
scale_x_discrete(breaks=[0])
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))[, -1]
tweets_count <- as.data.frame(tweets_count)
# sapply(tweets_count, mean)
tweets_melt <- melt(tweets_count, value.name="value")
ggplot(data=tweets_melt, aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=" ", y=" ") +
scale_x_discrete(breaks=[0])
tweets_count <- sapply(tweets, function(v)ifelse(as.numeric(v)>0, as.numeric(1), 0))[, -1]
tweets_count <- as.data.frame(tweets_count)
# sapply(tweets_count, mean)
tweets_melt <- melt(tweets_count, value.name="value")
ggplot(data=tweets_melt, aes(x=variable, y=value, fill=variable)) +
geom_bar(stat="identity") +
labs(x=" ", y=" ") +
scale_x_discrete(breaks=0)
?prcomp
data(iris)
# Pick out the first two columns
Z = iris[,c(1,4)]
# Clearly a lot of correlation structure in the measurements
plot(Z)
Z_centered = scale(Z, center=TRUE, scale=FALSE)
plot(Z_centered)
# Pick some random unit-norm vectors and show the implied subspace
v_try = rnorm(2)
v_try = v_try/sqrt(sum(v_try^2))
slope = v_try[2]/v_try[1]
plot(Z_centered)
abline(0, slope)
segments(0, 0, v_try[1], v_try[2], col='red', lwd=4)
# Pick some random unit-norm vectors to define subspace
# and project the points onto that subspace
v_try = rnorm(2)
v_try = v_try/sqrt(sum(v_try^2))
slope = v_try[2]/v_try[1]  # intercept = 0, slope = rise/run
# Show the subspace
par(mfrow=c(1,2))
plot(Z_centered, xlim=c(-2.5,2.5), ylim=c(-2.5,2.5))
abline(0, slope)  # plot the subspace as a line
# Project the points onto that subspace
alpha = Z_centered %*% v_try  # inner product of each row with v_try
z_hat = alpha %*% v_try  # locations in R^2
points(z_hat, col='blue', pch=4)
segments(0, 0, v_try[1], v_try[2], col='red', lwd=4)
hist(alpha, 25, xlim=c(-3,3), main=round(var(alpha), 2))
# Compare these random projections to the first PC
pc1 = prcomp(Z_centered)
v_best = pc1$rotation[,1]
v_best
slope_best = v_best[2]/v_best[1]  # intercept = 0, slope = rise/run
par(mfrow=c(1,2))
plot(Z_centered, xlim=c(-2.5,2.5), ylim=c(-2.5,2.5))
abline(0, slope_best)  # plot the subspace as a line
alpha_best = Z_centered %*% v_best  # inner product of each row with v_best
z_hat = alpha_best %*% v_best  # locations in R^2
points(z_hat, col='blue', pch=4)
segments(0, 0, v_best[1], v_best[2], col='red', lwd=4)
hist(alpha_best, 25, xlim=c(-3,3), main=round(var(alpha_best), 2))
# How much of the variation does this first principal component predict?
var(Z_centered[,1])
var(Z_centered[,2])
var(Z_centered[,1]) + var(Z_centered[,2])
# Shorthand for this
var_bycomponent = apply(Z_centered, 2, var)
sum(var_bycomponent)
# Compare with variance of the projected points
var(alpha_best)
var(alpha_best)/sum(var_bycomponent)  # as a ratio
# Compare with the answer from prcomp's plot method
# Compare with the answer from prcomp's plot method
par(mfrow=c(1,1))
plot(pc1)
pc1$sdev^2  # the standard deviation, rather than the variance
?prcomp
tweets_pc <- prcomp(tweets, center=TRUE, scale=TRUE)
tweets_pc <- prcomp(data=tweets, center=TRUE, scale=TRUE)
tweets <- read.csv("~/git/git_home/data/social_marketing.csv", colClasses="numeric")
?read.csv
summary(tweets)
tweets_pc <- prcomp(data=tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc
tweets_pc$x
tweets_pc$rotation
tweets_pc$rotation[,1]
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)$rotation[, 1:3]
tweets_pc
names(tweets_pc)
tweets_pc[,1]
var(tweets_pc[,1])
var(tweets_pc[,2])
var(tweets_pc[,3])
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
dim(tweets_pc)
dim(tweets_pc)$rotation
dim(tweets_pc$rotation)
summary(tweets_pc)
summary(tweets_pc)[3,]
names(summary(tweets_pc))
summary(tweets_pc)$importance
summary(tweets_pc)$importance[3,]
melt(summary(tweets_pc)$importance[3,], value.name="Cumulative importance")
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative importance")
ggplot(data=tweets_pc_imp, aes(x=variable, y=value, fill="gray")) +
geom_bar(stat="identity")
tweets_pc_imp
?melt
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], variable.names="PC", value.name="Cumulative_importance")
ggplot(data=tweets_pc_imp, aes(x=variable, y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity")
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], variable.names="PC", value.name="Cumulative_importance")
ggplot(data=tweets_pc_imp, aes(x=PC, y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity")
tweets_pc_imp
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], variable.names("PC"), value.name="Cumulative_importance")
ggplot(data=tweets_pc_imp, aes(x=PC, y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity")
tweets_pc_imp
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], id.vars="PC", value.name="Cumulative_importance")
ggplot(data=tweets_pc_imp, aes(x=PC, y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity")
head(tweets_pc_imp)
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], id.vars="PC", value.name="Cumulative_importance")
ggplot(data=tweets_pc_imp, aes(y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity")
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], variable.name="PC", value.name="Cumulative_importance")
ggplot(data=tweets_pc_imp, aes(y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity", alpha=0.5)
head(tweets_pc_imp)
colnames(tweets_pc_imp)[1] <- "PC"
head(tweets_pc_imp)
summary(tweets_pc)$importance[3,]
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- row.names(tweets_pc_imp)
x_index
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity", alpha=0.5)
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- row.names(tweets_pc_imp)
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance, fill="gray")) +
geom_bar(alpha=0.5)
paste(c("1", "2"), "x")
paste(c("1", "2"), "x", sep="")
paste("x",c("1", "2"),  sep="")
01:36
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- paste("PC0", c(1:9), sep="")
x_index <- c(x_index, paste("PC", c(10:36), sep=""))
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance, fill="gray")) +
geom_bar(stat="identity", alpha=0.5)
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- paste("PC0", c(1:9), sep="")
x_index <- c(x_index, paste("PC", c(10:36), sep=""))
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance)) +
geom_bar(stat="identity", fill="gray", alpha=0.5)
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- paste("PC0", c(1:9), sep="")
x_index <- c(x_index, paste("PC", c(10:36), sep=""))
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance)) +
geom_bar(stat="identity", fill="blue", alpha=0.6)
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- paste("PC0", c(1:9), sep="")
x_index <- c(x_index, paste("PC", c(10:36), sep=""))
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance)) +
geom_bar(stat="identity", fill="blue", alpha=0.6) +
geom_hline(yintercept=0.8, colour="red")
tweets_pc <- prcomp(tweets[, -1], center=TRUE, scale=TRUE)
tweets_pc_imp <- melt(summary(tweets_pc)$importance[3,], value.name="Cumulative_importance")
x_index <- paste("PC0", c(1:9), sep="")
x_index <- c(x_index, paste("PC", c(10:36), sep=""))
ggplot(data=tweets_pc_imp, aes(x=x_index, y=Cumulative_importance)) +
geom_bar(stat="identity", fill="blue", alpha=0.6) +
geom_hline(yintercept=0.8, colour="red") +
labs(x=" ", y="culumative importance")
pc <- tweets_pc$rotation
pc1 <- pc[,1]
pc1
row.names(pc1)
colnames(pc1)
names(pc1)
pc1[,1]
pc1[1,]
dim(pc1)
length(pc1)
pc1_df <- data.frame(names(pc1), pc1)
pc1_df
row.names(pc1_df)
row.names(pc1_df) <- ""
row.names(pc1_df) <- " "
row.names(pc1_df) <- NA
row.names(pc1_df) <- NULL
pc1_df
pc <- tweets_pc$rotation
pc1 <- pc[,1]
pc1_df <- data.frame(names(pc1), pc1)
row.names(pc1_df) <- NULL
colnames(pc1_df) <- c("Topic", "Projection")
pc <- tweets_pc$rotation
pc1 <- pc[,1]
pc1_df <- data.frame(names(pc1), pc1)
row.names(pc1_df) <- NULL
colnames(pc1_df) <- c("Topic", "Projection")
ggplot(data=pc1_df, aes(x=Topic, y=Projection)) +
geom_bar(stat="identity")
pc <- tweets_pc$rotation
pc1 <- pc[,1]
pc1_df <- data.frame(names(pc1), pc1)
row.names(pc1_df) <- NULL
colnames(pc1_df) <- c("Topic", "Projection")
ggplot(data=pc1_df, aes(x=Topic, y=Projection)) +
geom_bar(stat="identity", fill="red", alpha=0.6)
reorder
?reorder
colnames(tweets)
library("ISLR", lib.loc="/usr/local/lib/R/site-library")
remove.packages("ISLR", lib="/usr/local/lib/R/site-library")
detach("package:ISLR", unload=TRUE)
library("ISLR", lib.loc="/usr/local/lib/R/site-library")
detach("package:ISLR", unload=TRUE)
library("ISLR", lib.loc="/usr/local/lib/R/site-library")
detach("package:ISLR", unload=TRUE)
remove.packages("MatrixModels", lib="/usr/local/lib/R/site-library")
remove.packages("quantreg", lib="/usr/local/lib/R/site-library")
remove.packages("Rcpp", lib="/usr/local/lib/R/site-library")
remove.packages("RcppEigen", lib="/usr/local/lib/R/site-library")
remove.packages("SparseM", lib="/usr/local/lib/R/site-library")
